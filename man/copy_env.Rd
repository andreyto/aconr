% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nested_env.R
\name{copy_env}
\alias{copy_env}
\title{Create a copy of a nested environment structure}
\usage{
copy_env(
  x,
  deep = F,
  parent = parent.env(x),
  func.update.parent = T,
  deep.update.parent = T,
  into.env = NULL,
  ...
)
}
\arguments{
\item{x}{Top environment in a nested environment structure}

\item{deep}{Create a deep copy}

\item{parent}{Place new top environment under this parent environment}

\item{func.update.parent}{Update environment of functions, including
functions executed by active bindings. Updating is only performed if
the function's environment is the environment in which the function is
stored.}

\item{deep.update.parent}{For each environment assigned to a name in
the original environment, change parent to a newly created copy of the
original parent if the parent was the environment holding the name
(in other words, reset parents in the environment tree).}

\item{into.env}{Instead of creating new top environment, copy all elements
from the original top environment into the existing environment pointed to
by this argument.}

\item{...}{Passed to \code{\link[base]{list2env}} when the new environment
is created.}
}
\value{
Newly created environment
}
\description{
A nested environment is a tree of environments where the tree
relationship is defined by a predicate \code{identical(parent,parent.env(child))}.
}
\details{
With the default arguments, this function creates a deep copy of
the input nested environment where the parent-child relationsip is
replicated between the newly created environments. Environments of
functions assigned to names in the environment, including active
bindings are also reset, but only if the original function's
environment is the same as the environment that holds the name.
}
